#pragma once
#include <stdint.h>

namespace std {

class klock {
    uint8_t lock;
public:
    void acquire();
    void release();
    void a();
    void r();
};

class autolock {
    klock *lock;
public:
    autolock(klock *lock) : lock(lock) {
        lock->a();
    }
    ~autolock() {
        lock->r();
    }
};

inline void disable_interrupts()
{
    asm volatile (
        "cli"
    );
}

inline void enable_interrupts()
{
    asm volatile (
        "sti"
    );
}

inline bool check_interrupts()
{
    uint64_t rflags;
    __asm__ volatile (
        "pushfq\n\t"
        "pop %0"
        : "=rm" (rflags)
        :
        : "memory"
    );
    return !!(rflags & (1 << 9));
}


} // namespace std