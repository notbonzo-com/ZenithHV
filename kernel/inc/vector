#pragma once

#include <stddef.h>  // for size_t
#include <new>
#include <util>
#include <intr.hpp>

namespace std
{
    template <typename T>
    class vector {
    public:
        vector();
        ~vector();
        
        void push_back(const T& value);
        void pop_back();
        T& operator[](size_t index);
        const T& operator[](size_t index) const;
        size_t size() const;
        size_t capacity() const;

    private:
        T* data;
        size_t _size;
        size_t _capacity;

        void resize(size_t new_capacity);
    };

    template <typename T>
    vector<T>::vector() : data(nullptr), _size(0), _capacity(0) {}

    template <typename T>
    vector<T>::~vector() {
        for (size_t i = 0; i < _size; ++i) {
            data[i].~T();  // Explicitly call destructor
        }
        if (data) {
            kfree(data);
        }
    }

    template <typename T>
    void vector<T>::push_back(const T& value) {
        if (_size == _capacity) {
            resize(_capacity == 0 ? 1 : _capacity * 2);
        }
        new (&data[_size]) T(value);  // Placement new to construct object
        ++_size;
    }

    template <typename T>
    void vector<T>::pop_back() {
        if (_size == 0) {
            intr::kpanic(nullptr, "pop_back() called on empty vector");
        }
        data[--_size].~T();  // Explicitly call destructor
    }

    template <typename T>
    T& vector<T>::operator[](size_t index) {
        if (index >= _size) {
            intr::kpanic(nullptr, "index out of range");
        }
        return data[index];
    }

    template <typename T>
    const T& vector<T>::operator[](size_t index) const {
        if (index >= _size) {
            intr::kpanic(nullptr, "index out of range");
        }
        return data[index];
    }

    template <typename T>
    size_t vector<T>::size() const {
        return _size;
    }

    template <typename T>
    size_t vector<T>::capacity() const {
        return _capacity;
    }

    template <typename T>
    void vector<T>::resize(size_t new_capacity) {
        T* new_data = (T*)kmalloc(new_capacity * sizeof(T));
        if (!new_data) {
            intr::kpanic(nullptr, "bad_alloc()");
        }
        for (size_t i = 0; i < _size; ++i) {
            new (&new_data[i]) T(std::move(data[i]));  // Move old objects to new location
            data[i].~T();  // Destroy old objects
        }
        if (data) {
            kfree(data);
        }
        data = new_data;
        _capacity = new_capacity;
    }
}
