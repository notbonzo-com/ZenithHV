#pragma once

#include <stdint.h>
#include <stdbool.h>

namespace io {

	template < typename T >
	void out( uint16_t port, T value );

	template < typename T >
	T in( uint16_t port );

	void cli();
	void sti();
	void hlt();

	bool is_interrupts_enabled();

	uint64_t read_msr( uint32_t msr );
	void write_msr( uint32_t msr, uint64_t value );

	template < typename T >
	void ins( uint16_t port, void *addr, uint32_t count );

	template < typename T >
	void outs( uint16_t port, const void *addr, uint32_t count );

	void io_wait();
	void memory_barrier();
	void io_memory_barrier();
	void invalidate_cache();
	void flush_cache( const void *addr );

	inline void write_gs_base(uint64_t base) {
        asm volatile (
            "wrmsr"
            :
            : "c"(0xC0000101), "a"(static_cast<uint32_t>(base)), "d"(static_cast<uint32_t>(base >> 32))
        );
    }
    inline void write_kernel_gs_base(uint64_t base) {
        asm volatile (
            "wrmsr"
            :
            : "c"(0xC0000102), "a"(static_cast<uint32_t>(base)), "d"(static_cast<uint32_t>(base >> 32))
        );
    }
    inline uint64_t read_gs_base() {
        uint32_t low, high;
        asm volatile (
            "rdmsr"
            : "=a"(low), "=d"(high)
            : "c"(0xC0000101)
        );
        return (static_cast<uint64_t>(high) << 32) | low;
    }
    inline uint64_t read_kernel_gs_base() {
        uint32_t low, high;
        asm volatile (
            "rdmsr"
            : "=a"(low), "=d"(high)
            : "c"(0xC0000102)
        );
        return (static_cast<uint64_t>(high) << 32) | low;
    }
    static inline void write_tsc_aux(uint64_t pid) {
        write_msr(0xC0000103, pid);
    }

}
