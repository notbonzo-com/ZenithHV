#pragma once
#include <stdint.h>
#include <stddef.h>

inline void outb(uint16_t port, uint8_t value) {
    asm volatile("outb %0, %1" : : "a"(value), "Nd"(port));
}
inline uint8_t inb(uint16_t port) {
    uint8_t value;
    asm volatile("inb %1, %0" : "=a"(value) : "Nd"(port));
    return value;
}
inline void outw(uint16_t port, uint16_t value) {
    asm volatile("outw %0, %1" : : "a"(value), "Nd"(port));
}
inline uint16_t inw(uint16_t port) {
    uint16_t value;
    asm volatile("inw %1, %0" : "=a"(value) : "Nd"(port));
    return value;
}
inline void outl(uint16_t port, uint32_t value) {
    asm volatile("outl %0, %1" : : "a"(value), "Nd"(port));
}
inline uint32_t inl(uint16_t port) {
    uint32_t value;
    asm volatile("inl %1, %0" : "=a"(value) : "Nd"(port));
    return value;
}

inline void io_wait() {
    asm volatile("pause");
}

inline uint64_t read_msr(uint32_t reg)
{
    uint32_t eax = 0, edx = 0;
    __asm__ volatile(
        "rdmsr"
        : "=a"(eax), "=d"(edx)
        : "c"(reg)
        :"memory"
    );
    return ((uint64_t)eax | (uint64_t)edx << 32);
}

inline void write_msr(uint32_t reg, uint64_t value)
{
    __asm__ volatile(
        "wrmsr"
        :
        : "a"((uint32_t)value), "d"((uint32_t)(value >> 32)), "c"(reg)
        : "memory"
    );
}

inline void write_fs_base(uintptr_t address) {
    write_msr(0xc0000100, address);
}

inline uintptr_t read_fs_base(void) {
    return read_msr(0xc0000100);
}

inline void write_gs_base(uintptr_t val) {
    write_msr(0xc0000101, (uintptr_t)val);
}

inline  uintptr_t read_gs_base(void) {
    return read_msr(0xc0000101);
}

inline void write_tsc_aux(uint64_t pid) {
    write_msr(0xC0000103, pid);
}

inline uint64_t read_processor_id(void) {
    uint64_t pid;
    __asm__ volatile ("rdpid %0" : "=r" (pid));
    return pid;
}
