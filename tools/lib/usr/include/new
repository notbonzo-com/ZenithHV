#pragma once

#include <stddef.h>
#ifdef __is_kernel__
#include <kmalloc>
#include <sys/idt.hpp>
#else
#include <malloc.h>
#include <stdexcept>
#endif

inline void* operator new(size_t size) {
#ifdef __is_kernel__
    void* ptr = umalloc(size);
    if (!ptr) {
        intr::kpanic(nullptr, "Failed to allocate memory");
    }
#else
    void* ptr = malloc(size);
    if (!ptr) {
        throw std::bad_alloc();
    }
#endif
    return ptr;
}

inline void operator delete(void* ptr) noexcept {
#ifdef __is_kernel__
    if (ptr) {
        ufree(ptr);
    }
#else
    if (ptr) {
        free(ptr);
    }
#endif
}

inline void operator delete(void* ptr, size_t) noexcept {
#ifdef __is_kernel__
    if (ptr) {
        ufree(ptr);
    }
#else
    if (ptr) {
        free(ptr);
    }
#endif
}

inline void* operator new[](size_t size) {
#ifdef __is_kernel__
    void* ptr = umalloc(size);
    if (!ptr) {
        intr::kpanic(nullptr, "Failed to allocate memory");
    }
#else
    void* ptr = malloc(size);
    if (!ptr) {
        throw std::bad_alloc();
    }
#endif
    return ptr;
}

inline void operator delete[](void* ptr) noexcept {
#ifdef __is_kernel__
    if (ptr) {
        ufree(ptr);
    }
#else
    if (ptr) {
        free(ptr);
    }
#endif
}

inline void operator delete[](void* ptr, size_t) noexcept {
#ifdef __is_kernel__
    if (ptr) {
        ufree(ptr);
    }
#else
    if (ptr) {
        free(ptr);
    }
#endif
}

// Placement new
inline void* operator new(size_t, void* ptr) noexcept {
    return ptr;
}

inline void operator delete(void*, void*) noexcept {
    // Do nothing
}