#pragma once

#include <cstring>
#include <stdarg.h>
#ifdef __is_kernel__
// #include <stdio.h>
#error "Graphical kernel output not implemented"
#else
#include <stdio.h>
#endif

namespace std {
	namespace detail {
		static inline void _iostream_printf(const char* fmt, ...) {
			va_list args;
			va_start(args, fmt);
			vprintf(fmt, args);
			va_end(args);
		}
	}

	class streambuf {
	public:
		virtual streambuf& operator<<(const char* str) = 0;
		virtual streambuf& operator<<(char value) = 0;
		virtual streambuf& operator<<(unsigned char value) = 0;
		virtual streambuf& operator<<(short value) = 0;
		virtual streambuf& operator<<(unsigned short value) = 0;
		virtual streambuf& operator<<(int value) = 0;
		virtual streambuf& operator<<(unsigned int value) = 0;
		virtual streambuf& operator<<(long value) = 0;
		virtual streambuf& operator<<(unsigned long value) = 0;
		virtual streambuf& operator<<(long long value) = 0;
		virtual streambuf& operator<<(unsigned long long value) = 0;
		virtual streambuf& operator<<(bool value) = 0;
		virtual streambuf& operator<<(void* value) = 0;

		virtual streambuf& operator<<(streambuf& (*pf)(streambuf&)) = 0;
	};

	class basic_streambuf : public streambuf {
	private:
		int base = 10;
	public:
		basic_streambuf& operator<<(const char* str) override {
			detail::_iostream_printf("%s", str);
			return *this;
		}

		basic_streambuf& operator<<(char value) override {
			detail::_iostream_printf("%c", value);
			return *this;
		}

		basic_streambuf& operator<<(unsigned char value) override {
			detail::_iostream_printf("%c", value);
			return *this;
		}

		basic_streambuf& operator<<(short value) override {
			print_number(value);
			return *this;
		}

		basic_streambuf& operator<<(unsigned short value) override {
			print_number(value);
			return *this;
		}

		basic_streambuf& operator<<(int value) override {
			print_number(value);
			return *this;
		}

		basic_streambuf& operator<<(unsigned int value) override {
			print_number(value);
			return *this;
		}

		basic_streambuf& operator<<(long value) override {
			print_number(value);
			return *this;
		}

		basic_streambuf& operator<<(unsigned long value) override {
			print_number(value);
			return *this;
		}

		basic_streambuf& operator<<(long long value) override {
			print_number(value);
			return *this;
		}

		basic_streambuf& operator<<(unsigned long long value) override {
			print_number(value);
			return *this;
		}

		basic_streambuf& operator<<(bool value) override {
			detail::_iostream_printf("%s", value ? "true" : "false");
			return *this;
		}

		basic_streambuf& operator<<(void* value) override {
			detail::_iostream_printf("%p", value);
			return *this;
		}

		basic_streambuf& operator<<(streambuf& (*pf)(streambuf&)) override {
			return static_cast<basic_streambuf&>(pf(*this));
		}

		basic_streambuf& setbase(int b) {
			base = b;
			return *this;
		}

	private:
		template <typename T>
		void print_number(T value) {
			switch (base) {
				case 8:
					detail::_iostream_printf("%0*o", 0, value);
					break;
				case 10:
					detail::_iostream_printf("%0*d", 0, value);
					break;
				case 16:
					detail::_iostream_printf("%0*x", 0, value);
					break;
				case 2:
					detail::_iostream_printf("%0*b", 0, value);
					break;
				default:
					detail::_iostream_printf("%d", value);
			}
		}
	};

	inline streambuf& endl(streambuf& out) {
		out << '\n';
		return out;
	}

	inline streambuf& hex(streambuf& out) {
		static_cast<basic_streambuf&>(out).setbase(16);
		return out;
	}

	inline streambuf& dec(streambuf& out) {
		static_cast<basic_streambuf&>(out).setbase(10);
		return out;
	}

	inline streambuf& oct(streambuf& out) {
		static_cast<basic_streambuf&>(out).setbase(8);
		return out;
	}

	inline streambuf& bin(streambuf& out) {
		static_cast<basic_streambuf&>(out).setbase(2);
		return out;
	}

	basic_streambuf cout;
}